#!/usr/bin/env python3
"""
Quick fix script for feedback database issues.
This script adds the missing columns to the feedback table.
Run this on the server where the application is deployed.
"""

import pymysql
import os
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_db_config():
    """Get database configuration from environment variables"""
    return {
        'host': os.environ.get('DB_HOST', 'localhost'),
        'user': os.environ.get('DB_USER', 'root'),
        'password': os.environ.get('DB_PASSWORD', 'Sahil@123456'),
        'database': os.environ.get('DB_NAME', 'lawvriksh_db'),
        'port': int(os.environ.get('DB_PORT', '3306')),
        'charset': 'utf8mb4',
    }

def fix_feedback_table():
    """Add missing columns to feedback table"""
    try:
        config = get_db_config()
        logger.info(f"Connecting to database: {config['host']}:{config['port']}/{config['database']}")
        
        connection = pymysql.connect(**config)
        cursor = connection.cursor()
        
        # Check and add contact_willing column
        cursor.execute("""
            SELECT COUNT(*) 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE() 
            AND TABLE_NAME = 'feedback' 
            AND COLUMN_NAME = 'contact_willing'
        """)
        
        if cursor.fetchone()[0] == 0:
            logger.info("Adding contact_willing column...")
            cursor.execute("""
                ALTER TABLE feedback 
                ADD COLUMN contact_willing VARCHAR(10) DEFAULT NULL 
                AFTER additional_comments
            """)
            logger.info("‚úì contact_willing column added")
        else:
            logger.info("‚úì contact_willing column already exists")
        
        # Check and add contact_email column
        cursor.execute("""
            SELECT COUNT(*) 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE() 
            AND TABLE_NAME = 'feedback' 
            AND COLUMN_NAME = 'contact_email'
        """)
        
        if cursor.fetchone()[0] == 0:
            logger.info("Adding contact_email column...")
            cursor.execute("""
                ALTER TABLE feedback 
                ADD COLUMN contact_email VARCHAR(255) DEFAULT NULL 
                AFTER contact_willing
            """)
            logger.info("‚úì contact_email column added")
        else:
            logger.info("‚úì contact_email column already exists")
        
        # Commit changes
        connection.commit()
        
        # Verify table structure
        cursor.execute("DESCRIBE feedback")
        columns = cursor.fetchall()
        
        logger.info("Updated feedback table structure:")
        for column in columns:
            logger.info(f"  - {column[0]}: {column[1]}")
        
        cursor.close()
        connection.close()
        
        logger.info("‚úÖ Database fix completed successfully!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Database fix failed: {str(e)}")
        return False

if __name__ == "__main__":
    logger.info("Starting feedback database fix...")
    success = fix_feedback_table()
    
    if success:
        logger.info("üéâ Fix completed! You can now restart the application.")
    else:
        logger.error("üí• Fix failed! Please check the error messages above.")
